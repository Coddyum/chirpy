// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES (
  gen_random_uuid(),
  NOW(),
  NOW(),
  $1,
  $2
)
RETURNING id, created_at, updated_at, email, hashed_password, token, refresh_token, is_chirpy_red
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.Token,
		&i.RefreshToken,
		&i.IsChirpyRed,
	)
	return i, err
}

const deleteAllUsers = `-- name: DeleteAllUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, email, hashed_password, token, refresh_token, is_chirpy_red FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.Token,
		&i.RefreshToken,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, created_at, updated_at, email, hashed_password, token, refresh_token, is_chirpy_red FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.Token,
		&i.RefreshToken,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserFromAccessToken = `-- name: GetUserFromAccessToken :one
SELECT id, created_at, updated_at, email, hashed_password, token, refresh_token, is_chirpy_red FROM users WHERE id = $1
`

func (q *Queries) GetUserFromAccessToken(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromAccessToken, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.Token,
		&i.RefreshToken,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT id, created_at, updated_at, email, hashed_password, token, refresh_token, is_chirpy_red FROM users WHERE refresh_token = $1
`

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, refreshToken string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, refreshToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.Token,
		&i.RefreshToken,
		&i.IsChirpyRed,
	)
	return i, err
}

const updateUserInformation = `-- name: UpdateUserInformation :one
UPDATE users 
SET updated_at = $2,
    email = $3, 
    hashed_password = $4 
WHERE id = $1 
RETURNING id, created_at, updated_at, email, hashed_password, token, refresh_token, is_chirpy_red
`

type UpdateUserInformationParams struct {
	ID             uuid.UUID
	UpdatedAt      time.Time
	Email          string
	HashedPassword string
}

func (q *Queries) UpdateUserInformation(ctx context.Context, arg UpdateUserInformationParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserInformation,
		arg.ID,
		arg.UpdatedAt,
		arg.Email,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.Token,
		&i.RefreshToken,
		&i.IsChirpyRed,
	)
	return i, err
}

const upgradesUser = `-- name: UpgradesUser :exec
UPDATE users
SET updated_at = $2,
    is_chirpy_red = $3
WHERE id = $1
`

type UpgradesUserParams struct {
	ID          uuid.UUID
	UpdatedAt   time.Time
	IsChirpyRed bool
}

func (q *Queries) UpgradesUser(ctx context.Context, arg UpgradesUserParams) error {
	_, err := q.db.ExecContext(ctx, upgradesUser, arg.ID, arg.UpdatedAt, arg.IsChirpyRed)
	return err
}
